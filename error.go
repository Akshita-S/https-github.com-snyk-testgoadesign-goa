// Package goa standardizes on structured error responses: a request that fails because of
// invalid input or unexpected condition produces a response that contains one or more structured
// error(s). Each error object has three keys: a id (number), a title and a message. The title
// for a given id is always the same, the intent is to provide a human friendly categorization.
// The message is specific to the error occurrence and provides additional details that often
// include contextual information (name of parameters etc.).
//
// The basic data structure backing errors is TypedError which simply contains the id and message.
// Multiple errors (not just TypedError instances) can be encapsulated in a HTTPError. Both
// TypedError and HTTPError implement the error interface, the Error methods return valid JSON
// that can be written directly to a response body.
//
// The code generated by goagen calls the helper functions exposed in this file when it encounters
// invalid data (wrong type, validation errors etc.) such as InvalidParamTypeError,
// InvalidAttributeTypeError etc. These methods take and return an error which is a HTTPError that
// gets built over time. The final HTTPError object then gets serialized into the response and sent
// back to the client. The response status code is inferred from the type wrapping the error object:
// a BadRequestError produces a 400 status code while any other error produce a 500. This behavior
// can be overridden by setting a custom ErrorHandler in the application.
package goa

import (
	"fmt"
	"strings"
)

var (
	// ErrInvalidRequest is the class of errors produced by the generated code when
	// a request parameter or payload fails to validate.
	ErrInvalidRequest = NewErrorClass("invalid_request", 400)

	// ErrInvalidEncoding is the error produced when a request body fails
	// to be decoded.
	ErrInvalidEncoding = NewErrorClass("invalid_encoding", 400)

	// ErrNoSecurityScheme is the error produced when no security scheme has been
	// registered for a name defined in the design.
	ErrNoSecurityScheme = NewErrorClass("no_security_scheme", 500)

	// ErrBadRequest is a generic bad request error.
	ErrBadRequest = NewErrorClass("bad_request", 400)

	// ErrInternal is the class of error used for non Error.
	ErrInternal = NewErrorClass("internal", 500)
)

type (
	// Error contains the details of a error response.
	Error struct {
		// Code identifies the class of errors for client programs.
		Code string `json:"code" xml:"code"`
		// Status is the HTTP status code used by responses that cary the error.
		Status int `json:"status" xml:"status"`
		// Detail describes the specific error occurrence.
		Detail string `json:"detail" xml:"detail"`
		// MetaValues contains additional key/value pairs useful to clients.
		MetaValues map[string]interface{} `json:"meta,omitempty" xml:"meta,omitempty"`
	}

	// ErrorClass is an error generating function.
	// It accepts a format and values and produces errors with the resulting string.
	// If the format is a string or a Stringer then the string value is used.
	// If the format is an error then the string returned by Error() is used.
	// Otherwise the string produced using fmt.Sprintf("%v") is used.
	ErrorClass func(fm interface{}, v ...interface{}) *Error
)

// NewErrorClass creates a new error class.
// It is the responsability of the client to guarantee uniqueness of code.
func NewErrorClass(code string, status int) ErrorClass {
	return func(fm interface{}, v ...interface{}) *Error {
		var f string
		switch actual := fm.(type) {
		case string:
			f = actual
		case error:
			f = actual.Error()
		case fmt.Stringer:
			f = actual.String()
		default:
			f = fmt.Sprintf("%v", actual)
		}
		return &Error{Code: code, Status: status, Detail: fmt.Sprintf(f, v...)}
	}
}

// InvalidParamTypeError creates a Error with class ID ErrInvalidParamType
func InvalidParamTypeError(name string, val interface{}, expected string) *Error {
	return ErrInvalidRequest("invalid value %#v for parameter %#v, must be a %s", val, name, expected)
}

// MissingParamError creates a Error with class ID ErrMissingParam
func MissingParamError(name string) *Error {
	return ErrInvalidRequest("missing required parameter %#v", name)
}

// InvalidAttributeTypeError creates a Error with class ID ErrInvalidAttributeType
func InvalidAttributeTypeError(ctx string, val interface{}, expected string) *Error {
	return ErrInvalidRequest("type of %s must be %s but got value %#v", ctx, expected, val)
}

// MissingAttributeError creates a Error with class ID ErrMissingAttribute
func MissingAttributeError(ctx, name string) *Error {
	return ErrInvalidRequest("attribute %#v of %s is missing and required", name, ctx)
}

// MissingHeaderError creates a Error with class ID ErrMissingHeader
func MissingHeaderError(name string) *Error {
	return ErrInvalidRequest("missing required HTTP header %#v", name)
}

// InvalidEnumValueError creates a Error with class ID ErrInvalidEnumValue
func InvalidEnumValueError(ctx string, val interface{}, allowed []interface{}) *Error {
	elems := make([]string, len(allowed))
	for i, a := range allowed {
		elems[i] = fmt.Sprintf("%#v", a)
	}
	return ErrInvalidRequest("value of %s must be one of %s but got value %#v", ctx, strings.Join(elems, ", "), val)
}

// InvalidFormatError creates a Error with class ID ErrInvalidFormat
func InvalidFormatError(ctx, target string, format Format, formatError error) *Error {
	return ErrInvalidRequest("%s must be formatted as a %s but got value %#v, %s", ctx, format, target, formatError.Error())
}

// InvalidPatternError creates a Error with class ID ErrInvalidPattern
func InvalidPatternError(ctx, target string, pattern string) *Error {
	return ErrInvalidRequest("%s must match the regexp %#v but got value %#v", ctx, pattern, target)
}

// InvalidRangeError creates a Error with class ID ErrInvalidRange
func InvalidRangeError(ctx string, target interface{}, value int, min bool) *Error {
	comp := "greater or equal"
	if !min {
		comp = "lesser or equal"
	}
	return ErrInvalidRequest("%s must be %s than %d but got value %#v", ctx, comp, value, target)
}

// InvalidLengthError creates a Error with class ID ErrInvalidLength
func InvalidLengthError(ctx string, target interface{}, ln, value int, min bool) *Error {
	comp := "greater or equal"
	if !min {
		comp = "lesser or equal"
	}
	return ErrInvalidRequest("length of %s must be %s than %d but got value %#v (len=%d)", ctx, comp, value, target, ln)
}

// NoSecurityScheme creates a Error with class ID ErrNoSecurityScheme
func NoSecurityScheme(schemeName string) *Error {
	return ErrNoSecurityScheme("invalid security scheme %s", schemeName)
}

// Error returns the error occurrence details.
func (e *Error) Error() string {
	return e.Detail
}

// Meta adds to the error metadata.
func (e *Error) Meta(keyvals ...interface{}) *Error {
	for i := 0; i < len(keyvals); i += 2 {
		k := keyvals[i]
		var v interface{} = "MISSING"
		if i+1 < len(keyvals) {
			v = keyvals[i+1]
		}
		e.MetaValues[fmt.Sprintf("%v", k)] = v
	}
	return e
}
