package main

import (
	"context"
	"encoding/json"
	"flag"
	"fmt"
	"net/http"
	"net/url"
	"os"
	"time"

	"goa.design/goa.v2/examples/account/gen/cli"
	genhttp "goa.design/goa.v2/examples/account/gen/transport/http"
	"goa.design/goa.v2/rest"
)

func main() {
	var (
		addr    = flag.String("addr", "http://localhost:8080", "HTTP `address` of basic service")
		debug   = flag.Bool("debug", false, "Print debug details")
		timeout = flag.Int("timeout", 30, "Maximum number of `seconds` to wait for response")

		accountFlags = flag.NewFlagSet("account", flag.ExitOnError)

		accountCreateFlags     = flag.NewFlagSet("account-create", flag.ExitOnError)
		accountCreateBodyFlag  = accountCreateFlags.String("body", "", "account create body in JSON format")
		accountCreateOrgIDFlag = accountCreateFlags.Int("org-id", 0, "ID of organization that owns newly created account")

		accountListFlags      = flag.NewFlagSet("account-list", flag.ExitOnError)
		accountListFilterFlag = accountListFlags.String("filter", "", "Filter is the account name prefix filter")

		accountShowFlags  = flag.NewFlagSet("account-show", flag.ExitOnError)
		accountShowIDFlag = accountShowFlags.String("id", "", "ID of account")

		accountDeleteFlags  = flag.NewFlagSet("account-delete", flag.ExitOnError)
		accountDeleteIDFlag = accountDeleteFlags.String("id", "", "ID of account")
	)
	flag.Usage = usage
	flag.Parse()

	if len(os.Args) < flag.NFlag()+3 {
		flag.Usage()
		os.Exit(1)
	}

	var (
		service      string
		serviceFlags *flag.FlagSet
	)
	{
		service = os.Args[1+flag.NFlag()]
		switch service {
		case "account":
			serviceFlags = accountFlags
		default:
			fmt.Fprintf(os.Stderr, "unknown service %#v", service)
			os.Exit(1)
		}
	}

	var (
		endpoint      string
		endpointFlags *flag.FlagSet
	)
	{
		serviceFlags.Parse(os.Args[2+flag.NFlag():])
		endpoint = os.Args[2+flag.NFlag()+serviceFlags.NFlag()]
		switch endpoint {
		case "create":
			endpointFlags = accountCreateFlags
		case "list":
			endpointFlags = accountListFlags
		case "show":
			endpointFlags = accountShowFlags
		case "delete":
			endpointFlags = accountDeleteFlags
		default:
			fmt.Fprintf(os.Stderr, "unknown %s endpoint %#v", service, endpoint)
			os.Exit(1)
		}

		if len(os.Args) > 2+flag.NFlag()+serviceFlags.NFlag() {
			endpointFlags.Parse(os.Args[3+flag.NFlag()+serviceFlags.NFlag():])
		}
	}

	var (
		scheme string
		host   string
	)
	{
		u, err := url.Parse(*addr)
		if err != nil {
			fmt.Fprintf(os.Stderr, "invalid address %#v: %s", *addr, err)
			os.Exit(1)
		}
		scheme = u.Scheme
		host = u.Host
		if scheme == "" {
			scheme = "http"
		}
	}

	var (
		doer rest.Doer
	)
	{
		doer = http.DefaultClient
		if *debug {
			doer = rest.NewDebugDoer(doer)
		}
	}

	var (
		data interface{}
		err  error
	)
	{
		ctx, _ := context.WithDeadline(context.Background(),
			time.Now().Add(time.Duration(*timeout)*time.Second))
		switch service {
		case "account":
			client := genhttp.NewAccountClient(
				scheme,
				host,
				http.DefaultClient,
				genhttp.NewRequestEncoder,
				genhttp.NewResponseDecoder,
			)
			switch endpoint {
			case "create":
				data, err = cli.RunAccountCreate(ctx, client.Create(), *accountCreateBodyFlag, *accountCreateOrgIDFlag)
			case "list":
				data, err = cli.RunAccountList(ctx, client.List(), *accountListFilterFlag)
			case "show":
				data, err = cli.RunAccountShow(ctx, client.Show(), *accountShowIDFlag)
			case "delete":
				data, err = cli.RunAccountDelete(ctx, client.Delete(), *accountDeleteIDFlag)
			}
		}
	}

	if dd, ok := doer.(rest.DebugDoer); ok {
		dd.Fprint(os.Stderr)
	}

	if err != nil {
		fmt.Fprintf(os.Stderr, err.Error())
		os.Exit(1)
	}

	m, _ := json.MarshalIndent(data, "", "    ")
	fmt.Println(string(m))
}

func usage() {
	fmt.Fprint(os.Stderr, `basiccli is a command line client for the basic service.
Usage:
    basiccli [FLAGS] SERVICE ENDPOINT [FLAGS]

Example:
    basiccli --addr http://localhost:8080 account list --filter foo

Commands:
    basiccli account (create|list|show|delete)
`)
}
